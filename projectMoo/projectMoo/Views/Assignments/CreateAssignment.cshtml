@model projectMoo.Models.ViewModels.AssignmentViewModel

<div class="body-content">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal center col-md-4">
            <h4>New Assignment</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(model => model.CourseID, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.CourseID, ViewData["Courses"] as List<SelectListItem>, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.CourseID, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control " } })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.DueDate, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.DueDate, new { htmlAttributes = new { @class = "form-control", id = "datepicker" } })
                    @Html.ValidationMessageFor(model => model.DueDate, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create Assignment" class="btn btn-primary form-control" />
                </div>
            </div>
        </div>
        <div class="col-md-5 allMilestones">
            <div id="milestones">
                @for (int i = 0; i < Model.Milestones.Count; i++)
                {
                    string className = "hidden";
                    if (i == 0)
                    {
                        className = "visible";
                    }
                    <div class="@className" id="@i">
                       @Html.EditorFor(model => model.Milestones[i]) 
                    </div>
                }
                <div>
                    <button type="button" class="btn btn-primary button-top form-control" id="btnNewMilestone">+ Milestone</button>
                </div>
            </div>
        </div>
    }
</div>
     
@Scripts.Render("~/Scripts/CreateAssignmentScript.js")
